{
    "sourceFile": "src/pdf/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1737262482022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1737262534664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,5 +52,7 @@\n       }\n     } catch (error) {\n       console.error('Erro ao gerar PDF:', error);\n       alert('Erro ao gerar o PDF. Tente novamente.');\n-    }\n\\ No newline at end of file\n+    }\n+\n+    export default \n\\ No newline at end of file\n"
                },
                {
                    "date": 1737262543224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,5 +54,5 @@\n       console.error('Erro ao gerar PDF:', error);\n       alert('Erro ao gerar o PDF. Tente novamente.');\n     }\n \n-    export default \n\\ No newline at end of file\n+    export default h\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737262548902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,58 @@\n+  try {\n+      // Crie o conteúdo HTML para o PDF\n+      const htmlContent = `\n+        <html>\n+          <head>\n+            <style>\n+              body { font-family: Arial, sans-serif; padding: 20px; }\n+              h1 { text-align: center; color: #333; }\n+              table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n+              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n+              th { background-color: #f4f4f4; }\n+            </style>\n+          </head>\n+          <body>\n+            <h1>Relatório de Hora Extra</h1>\n+            <p><strong>Linha:</strong> ${line}</p>\n+            <p><strong>Data:</strong> ${date.toLocaleDateString('pt-BR')}</p>\n+            <table>\n+              <thead>\n+                <tr>\n+                  <th>Posto de Trabalho</th>\n+                  <th>Colaborador</th>\n+                </tr>\n+              </thead>\n+              <tbody>\n+                ${Object.entries(formData)\n+          .map(\n+            ([key, value]) => `\n+                  <tr>\n+                    <td>${key}</td>\n+                    <td>${value || '-'}</td>\n+                  </tr>\n+                `\n+          )\n+          .join('')}\n+              </tbody>\n+            </table>\n+          </body>\n+        </html>\n+      `;\n+\n+      // Gera o PDF usando a Expo Print API\n+      const { uri } = await Print.printToFileAsync({ html: htmlContent });\n+\n+      console.log('PDF gerado com sucesso:', uri);\n+\n+      // Opção para abrir o arquivo diretamente (se necessário)\n+      if (await Sharing.isAvailableAsync()) {\n+        await Sharing.shareAsync(uri);\n+      } else {\n+        alert(`PDF gerado e salvo em: ${uri}`);\n+      }\n+    } catch (error) {\n+      console.error('Erro ao gerar PDF:', error);\n+      alert('Erro ao gerar o PDF. Tente novamente.');\n+    }\n+\n+    export default htmlContent\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737262622789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+  \n+  \n+  \n+  try {\n+      // Crie o conteúdo HTML para o PDF\n+      const htmlContent = `\n+        <html>\n+          <head>\n+            <style>\n+              body { font-family: Arial, sans-serif; padding: 20px; }\n+              h1 { text-align: center; color: #333; }\n+              table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n+              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n+              th { background-color: #f4f4f4; }\n+            </style>\n+          </head>\n+          <body>\n+            <h1>Relatório de Hora Extra</h1>\n+            <p><strong>Linha:</strong> ${line}</p>\n+            <p><strong>Data:</strong> ${date.toLocaleDateString('pt-BR')}</p>\n+            <table>\n+              <thead>\n+                <tr>\n+                  <th>Posto de Trabalho</th>\n+                  <th>Colaborador</th>\n+                </tr>\n+              </thead>\n+              <tbody>\n+                ${Object.entries(formData)\n+          .map(\n+            ([key, value]) => `\n+                  <tr>\n+                    <td>${key}</td>\n+                    <td>${value || '-'}</td>\n+                  </tr>\n+                `\n+          )\n+          .join('')}\n+              </tbody>\n+            </table>\n+          </body>\n+        </html>\n+      `;\n+\n+      // Gera o PDF usando a Expo Print API\n+      const { uri } = await Print.printToFileAsync({ html: htmlContent });\n+\n+      console.log('PDF gerado com sucesso:', uri);\n+\n+      // Opção para abrir o arquivo diretamente (se necessário)\n+      if (await Sharing.isAvailableAsync()) {\n+        await Sharing.shareAsync(uri);\n+      } else {\n+        alert(`PDF gerado e salvo em: ${uri}`);\n+      }\n+    } catch (error) {\n+      console.error('Erro ao gerar PDF:', error);\n+      alert('Erro ao gerar o PDF. Tente novamente.');\n+    }\n+\n+    export default htmlContent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737262648702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+  import * as Print from 'expo-print';\n+  import * as Sharing from 'expo-sharing'; // Para compartilhar o PDF gerado\n+  \n+  \n+  try {\n+      // Crie o conteúdo HTML para o PDF\n+      const htmlContent = `\n+        <html>\n+          <head>\n+            <style>\n+              body { font-family: Arial, sans-serif; padding: 20px; }\n+              h1 { text-align: center; color: #333; }\n+              table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n+              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n+              th { background-color: #f4f4f4; }\n+            </style>\n+          </head>\n+          <body>\n+            <h1>Relatório de Hora Extra</h1>\n+            <p><strong>Linha:</strong> ${line}</p>\n+            <p><strong>Data:</strong> ${date.toLocaleDateString('pt-BR')}</p>\n+            <table>\n+              <thead>\n+                <tr>\n+                  <th>Posto de Trabalho</th>\n+                  <th>Colaborador</th>\n+                </tr>\n+              </thead>\n+              <tbody>\n+                ${Object.entries(formData)\n+          .map(\n+            ([key, value]) => `\n+                  <tr>\n+                    <td>${key}</td>\n+                    <td>${value || '-'}</td>\n+                  </tr>\n+                `\n+          )\n+          .join('')}\n+              </tbody>\n+            </table>\n+          </body>\n+        </html>\n+      `;\n+\n+      // Gera o PDF usando a Expo Print API\n+      const { uri } = await Print.printToFileAsync({ html: htmlContent });\n+\n+      console.log('PDF gerado com sucesso:', uri);\n+\n+      // Opção para abrir o arquivo diretamente (se necessário)\n+      if (await Sharing.isAvailableAsync()) {\n+        await Sharing.shareAsync(uri);\n+      } else {\n+        alert(`PDF gerado e salvo em: ${uri}`);\n+      }\n+    } catch (error) {\n+      console.error('Erro ao gerar PDF:', error);\n+      alert('Erro ao gerar o PDF. Tente novamente.');\n+    }\n+\n+    export default htmlContent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737262659220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+  import * as Print from 'expo-print';\n+  import * as Sharing from 'expo-sharing'; // Para compartilhar o PDF gerado\n+  \n+  function \n+  try {\n+      // Crie o conteúdo HTML para o PDF\n+      const htmlContent = `\n+        <html>\n+          <head>\n+            <style>\n+              body { font-family: Arial, sans-serif; padding: 20px; }\n+              h1 { text-align: center; color: #333; }\n+              table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n+              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n+              th { background-color: #f4f4f4; }\n+            </style>\n+          </head>\n+          <body>\n+            <h1>Relatório de Hora Extra</h1>\n+            <p><strong>Linha:</strong> ${line}</p>\n+            <p><strong>Data:</strong> ${date.toLocaleDateString('pt-BR')}</p>\n+            <table>\n+              <thead>\n+                <tr>\n+                  <th>Posto de Trabalho</th>\n+                  <th>Colaborador</th>\n+                </tr>\n+              </thead>\n+              <tbody>\n+                ${Object.entries(formData)\n+          .map(\n+            ([key, value]) => `\n+                  <tr>\n+                    <td>${key}</td>\n+                    <td>${value || '-'}</td>\n+                  </tr>\n+                `\n+          )\n+          .join('')}\n+              </tbody>\n+            </table>\n+          </body>\n+        </html>\n+      `;\n+\n+      // Gera o PDF usando a Expo Print API\n+      const { uri } = await Print.printToFileAsync({ html: htmlContent });\n+\n+      console.log('PDF gerado com sucesso:', uri);\n+\n+      // Opção para abrir o arquivo diretamente (se necessário)\n+      if (await Sharing.isAvailableAsync()) {\n+        await Sharing.shareAsync(uri);\n+      } else {\n+        alert(`PDF gerado e salvo em: ${uri}`);\n+      }\n+    } catch (error) {\n+      console.error('Erro ao gerar PDF:', error);\n+      alert('Erro ao gerar o PDF. Tente novamente.');\n+    }\n+\n+    export default htmlContent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737262667525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+  import * as Print from 'expo-print';\n+  import * as Sharing from 'expo-sharing'; // Para compartilhar o PDF gerado\n+  \n+  function cons\n+  try {\n+      // Crie o conteúdo HTML para o PDF\n+      const htmlContent = `\n+        <html>\n+          <head>\n+            <style>\n+              body { font-family: Arial, sans-serif; padding: 20px; }\n+              h1 { text-align: center; color: #333; }\n+              table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n+              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n+              th { background-color: #f4f4f4; }\n+            </style>\n+          </head>\n+          <body>\n+            <h1>Relatório de Hora Extra</h1>\n+            <p><strong>Linha:</strong> ${line}</p>\n+            <p><strong>Data:</strong> ${date.toLocaleDateString('pt-BR')}</p>\n+            <table>\n+              <thead>\n+                <tr>\n+                  <th>Posto de Trabalho</th>\n+                  <th>Colaborador</th>\n+                </tr>\n+              </thead>\n+              <tbody>\n+                ${Object.entries(formData)\n+          .map(\n+            ([key, value]) => `\n+                  <tr>\n+                    <td>${key}</td>\n+                    <td>${value || '-'}</td>\n+                  </tr>\n+                `\n+          )\n+          .join('')}\n+              </tbody>\n+            </table>\n+          </body>\n+        </html>\n+      `;\n+\n+      // Gera o PDF usando a Expo Print API\n+      const { uri } = await Print.printToFileAsync({ html: htmlContent });\n+\n+      console.log('PDF gerado com sucesso:', uri);\n+\n+      // Opção para abrir o arquivo diretamente (se necessário)\n+      if (await Sharing.isAvailableAsync()) {\n+        await Sharing.shareAsync(uri);\n+      } else {\n+        alert(`PDF gerado e salvo em: ${uri}`);\n+      }\n+    } catch (error) {\n+      console.error('Erro ao gerar PDF:', error);\n+      alert('Erro ao gerar o PDF. Tente novamente.');\n+    }\n+\n+    export default htmlContent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737262684344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n   import * as Print from 'expo-print';\n   import * as Sharing from 'expo-sharing'; // Para compartilhar o PDF gerado\n   \n-  function cons\n+  function  deaaf\n   try {\n       // Crie o conteúdo HTML para o PDF\n       const htmlContent = `\n         <html>\n@@ -58,306 +58,5 @@\n       console.error('Erro ao gerar PDF:', error);\n       alert('Erro ao gerar o PDF. Tente novamente.');\n     }\n \n-    export default htmlContent;\n-  import * as Print from 'expo-print';\n-  import * as Sharing from 'expo-sharing'; // Para compartilhar o PDF gerado\n-  \n-  function \n-  try {\n-      // Crie o conteúdo HTML para o PDF\n-      const htmlContent = `\n-        <html>\n-          <head>\n-            <style>\n-              body { font-family: Arial, sans-serif; padding: 20px; }\n-              h1 { text-align: center; color: #333; }\n-              table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n-              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n-              th { background-color: #f4f4f4; }\n-            </style>\n-          </head>\n-          <body>\n-            <h1>Relatório de Hora Extra</h1>\n-            <p><strong>Linha:</strong> ${line}</p>\n-            <p><strong>Data:</strong> ${date.toLocaleDateString('pt-BR')}</p>\n-            <table>\n-              <thead>\n-                <tr>\n-                  <th>Posto de Trabalho</th>\n-                  <th>Colaborador</th>\n-                </tr>\n-              </thead>\n-              <tbody>\n-                ${Object.entries(formData)\n-          .map(\n-            ([key, value]) => `\n-                  <tr>\n-                    <td>${key}</td>\n-                    <td>${value || '-'}</td>\n-                  </tr>\n-                `\n-          )\n-          .join('')}\n-              </tbody>\n-            </table>\n-          </body>\n-        </html>\n-      `;\n-\n-      // Gera o PDF usando a Expo Print API\n-      const { uri } = await Print.printToFileAsync({ html: htmlContent });\n-\n-      console.log('PDF gerado com sucesso:', uri);\n-\n-      // Opção para abrir o arquivo diretamente (se necessário)\n-      if (await Sharing.isAvailableAsync()) {\n-        await Sharing.shareAsync(uri);\n-      } else {\n-        alert(`PDF gerado e salvo em: ${uri}`);\n-      }\n-    } catch (error) {\n-      console.error('Erro ao gerar PDF:', error);\n-      alert('Erro ao gerar o PDF. Tente novamente.');\n-    }\n-\n-    export default htmlContent;\n-  import * as Print from 'expo-print';\n-  import * as Sharing from 'expo-sharing'; // Para compartilhar o PDF gerado\n-  \n-  \n-  try {\n-      // Crie o conteúdo HTML para o PDF\n-      const htmlContent = `\n-        <html>\n-          <head>\n-            <style>\n-              body { font-family: Arial, sans-serif; padding: 20px; }\n-              h1 { text-align: center; color: #333; }\n-              table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n-              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n-              th { background-color: #f4f4f4; }\n-            </style>\n-          </head>\n-          <body>\n-            <h1>Relatório de Hora Extra</h1>\n-            <p><strong>Linha:</strong> ${line}</p>\n-            <p><strong>Data:</strong> ${date.toLocaleDateString('pt-BR')}</p>\n-            <table>\n-              <thead>\n-                <tr>\n-                  <th>Posto de Trabalho</th>\n-                  <th>Colaborador</th>\n-                </tr>\n-              </thead>\n-              <tbody>\n-                ${Object.entries(formData)\n-          .map(\n-            ([key, value]) => `\n-                  <tr>\n-                    <td>${key}</td>\n-                    <td>${value || '-'}</td>\n-                  </tr>\n-                `\n-          )\n-          .join('')}\n-              </tbody>\n-            </table>\n-          </body>\n-        </html>\n-      `;\n-\n-      // Gera o PDF usando a Expo Print API\n-      const { uri } = await Print.printToFileAsync({ html: htmlContent });\n-\n-      console.log('PDF gerado com sucesso:', uri);\n-\n-      // Opção para abrir o arquivo diretamente (se necessário)\n-      if (await Sharing.isAvailableAsync()) {\n-        await Sharing.shareAsync(uri);\n-      } else {\n-        alert(`PDF gerado e salvo em: ${uri}`);\n-      }\n-    } catch (error) {\n-      console.error('Erro ao gerar PDF:', error);\n-      alert('Erro ao gerar o PDF. Tente novamente.');\n-    }\n-\n-    export default htmlContent;\n-  \n-  \n-  \n-  try {\n-      // Crie o conteúdo HTML para o PDF\n-      const htmlContent = `\n-        <html>\n-          <head>\n-            <style>\n-              body { font-family: Arial, sans-serif; padding: 20px; }\n-              h1 { text-align: center; color: #333; }\n-              table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n-              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n-              th { background-color: #f4f4f4; }\n-            </style>\n-          </head>\n-          <body>\n-            <h1>Relatório de Hora Extra</h1>\n-            <p><strong>Linha:</strong> ${line}</p>\n-            <p><strong>Data:</strong> ${date.toLocaleDateString('pt-BR')}</p>\n-            <table>\n-              <thead>\n-                <tr>\n-                  <th>Posto de Trabalho</th>\n-                  <th>Colaborador</th>\n-                </tr>\n-              </thead>\n-              <tbody>\n-                ${Object.entries(formData)\n-          .map(\n-            ([key, value]) => `\n-                  <tr>\n-                    <td>${key}</td>\n-                    <td>${value || '-'}</td>\n-                  </tr>\n-                `\n-          )\n-          .join('')}\n-              </tbody>\n-            </table>\n-          </body>\n-        </html>\n-      `;\n-\n-      // Gera o PDF usando a Expo Print API\n-      const { uri } = await Print.printToFileAsync({ html: htmlContent });\n-\n-      console.log('PDF gerado com sucesso:', uri);\n-\n-      // Opção para abrir o arquivo diretamente (se necessário)\n-      if (await Sharing.isAvailableAsync()) {\n-        await Sharing.shareAsync(uri);\n-      } else {\n-        alert(`PDF gerado e salvo em: ${uri}`);\n-      }\n-    } catch (error) {\n-      console.error('Erro ao gerar PDF:', error);\n-      alert('Erro ao gerar o PDF. Tente novamente.');\n-    }\n-\n-    export default htmlContent;\n-  try {\n-      // Crie o conteúdo HTML para o PDF\n-      const htmlContent = `\n-        <html>\n-          <head>\n-            <style>\n-              body { font-family: Arial, sans-serif; padding: 20px; }\n-              h1 { text-align: center; color: #333; }\n-              table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n-              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n-              th { background-color: #f4f4f4; }\n-            </style>\n-          </head>\n-          <body>\n-            <h1>Relatório de Hora Extra</h1>\n-            <p><strong>Linha:</strong> ${line}</p>\n-            <p><strong>Data:</strong> ${date.toLocaleDateString('pt-BR')}</p>\n-            <table>\n-              <thead>\n-                <tr>\n-                  <th>Posto de Trabalho</th>\n-                  <th>Colaborador</th>\n-                </tr>\n-              </thead>\n-              <tbody>\n-                ${Object.entries(formData)\n-          .map(\n-            ([key, value]) => `\n-                  <tr>\n-                    <td>${key}</td>\n-                    <td>${value || '-'}</td>\n-                  </tr>\n-                `\n-          )\n-          .join('')}\n-              </tbody>\n-            </table>\n-          </body>\n-        </html>\n-      `;\n-\n-      // Gera o PDF usando a Expo Print API\n-      const { uri } = await Print.printToFileAsync({ html: htmlContent });\n-\n-      console.log('PDF gerado com sucesso:', uri);\n-\n-      // Opção para abrir o arquivo diretamente (se necessário)\n-      if (await Sharing.isAvailableAsync()) {\n-        await Sharing.shareAsync(uri);\n-      } else {\n-        alert(`PDF gerado e salvo em: ${uri}`);\n-      }\n-    } catch (error) {\n-      console.error('Erro ao gerar PDF:', error);\n-      alert('Erro ao gerar o PDF. Tente novamente.');\n-    }\n-\n-    export default htmlContent\n-  try {\n-      // Crie o conteúdo HTML para o PDF\n-      const htmlContent = `\n-        <html>\n-          <head>\n-            <style>\n-              body { font-family: Arial, sans-serif; padding: 20px; }\n-              h1 { text-align: center; color: #333; }\n-              table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n-              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n-              th { background-color: #f4f4f4; }\n-            </style>\n-          </head>\n-          <body>\n-            <h1>Relatório de Hora Extra</h1>\n-            <p><strong>Linha:</strong> ${line}</p>\n-            <p><strong>Data:</strong> ${date.toLocaleDateString('pt-BR')}</p>\n-            <table>\n-              <thead>\n-                <tr>\n-                  <th>Posto de Trabalho</th>\n-                  <th>Colaborador</th>\n-                </tr>\n-              </thead>\n-              <tbody>\n-                ${Object.entries(formData)\n-          .map(\n-            ([key, value]) => `\n-                  <tr>\n-                    <td>${key}</td>\n-                    <td>${value || '-'}</td>\n-                  </tr>\n-                `\n-          )\n-          .join('')}\n-              </tbody>\n-            </table>\n-          </body>\n-        </html>\n-      `;\n-\n-      // Gera o PDF usando a Expo Print API\n-      const { uri } = await Print.printToFileAsync({ html: htmlContent });\n-\n-      console.log('PDF gerado com sucesso:', uri);\n-\n-      // Opção para abrir o arquivo diretamente (se necessário)\n-      if (await Sharing.isAvailableAsync()) {\n-        await Sharing.shareAsync(uri);\n-      } else {\n-        alert(`PDF gerado e salvo em: ${uri}`);\n-      }\n-    } catch (error) {\n-      console.error('Erro ao gerar PDF:', error);\n-      alert('Erro ao gerar o PDF. Tente novamente.');\n-    }\n-\n-    export default h\n\\ No newline at end of file\n+    export default htmlContent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737262691519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n   import * as Print from 'expo-print';\n   import * as Sharing from 'expo-sharing'; // Para compartilhar o PDF gerado\n   \n-  function  deaaf\n+  function default \n   try {\n       // Crie o conteúdo HTML para o PDF\n       const htmlContent = `\n         <html>\n"
                },
                {
                    "date": 1737262715880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+  import * as Print from 'expo-print';\n+  import * as Sharing from 'expo-sharing'; // Para compartilhar o PDF gerado\n+  \n+  functio \n+  try {\n+      // Crie o conteúdo HTML para o PDF\n+      const htmlContent = `\n+        <html>\n+          <head>\n+            <style>\n+              body { font-family: Arial, sans-serif; padding: 20px; }\n+              h1 { text-align: center; color: #333; }\n+              table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n+              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n+              th { background-color: #f4f4f4; }\n+            </style>\n+          </head>\n+          <body>\n+            <h1>Relatório de Hora Extra</h1>\n+            <p><strong>Linha:</strong> ${line}</p>\n+            <p><strong>Data:</strong> ${date.toLocaleDateString('pt-BR')}</p>\n+            <table>\n+              <thead>\n+                <tr>\n+                  <th>Posto de Trabalho</th>\n+                  <th>Colaborador</th>\n+                </tr>\n+              </thead>\n+              <tbody>\n+                ${Object.entries(formData)\n+          .map(\n+            ([key, value]) => `\n+                  <tr>\n+                    <td>${key}</td>\n+                    <td>${value || '-'}</td>\n+                  </tr>\n+                `\n+          )\n+          .join('')}\n+              </tbody>\n+            </table>\n+          </body>\n+        </html>\n+      `;\n+\n+      // Gera o PDF usando a Expo Print API\n+      const { uri } = await Print.printToFileAsync({ html: htmlContent });\n+\n+      console.log('PDF gerado com sucesso:', uri);\n+\n+      // Opção para abrir o arquivo diretamente (se necessário)\n+      if (await Sharing.isAvailableAsync()) {\n+        await Sharing.shareAsync(uri);\n+      } else {\n+        alert(`PDF gerado e salvo em: ${uri}`);\n+      }\n+    } catch (error) {\n+      console.error('Erro ao gerar PDF:', error);\n+      alert('Erro ao gerar o PDF. Tente novamente.');\n+    }\n+\n+    export default htmlContent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737262722926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+  import * as Print from 'expo-print';\n+  import * as Sharing from 'expo-sharing'; // Para compartilhar o PDF gerado\n+  \n+  functio htm\n+  try {\n+      // Crie o conteúdo HTML para o PDF\n+      const htmlContent = `\n+        <html>\n+          <head>\n+            <style>\n+              body { font-family: Arial, sans-serif; padding: 20px; }\n+              h1 { text-align: center; color: #333; }\n+              table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n+              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n+              th { background-color: #f4f4f4; }\n+            </style>\n+          </head>\n+          <body>\n+            <h1>Relatório de Hora Extra</h1>\n+            <p><strong>Linha:</strong> ${line}</p>\n+            <p><strong>Data:</strong> ${date.toLocaleDateString('pt-BR')}</p>\n+            <table>\n+              <thead>\n+                <tr>\n+                  <th>Posto de Trabalho</th>\n+                  <th>Colaborador</th>\n+                </tr>\n+              </thead>\n+              <tbody>\n+                ${Object.entries(formData)\n+          .map(\n+            ([key, value]) => `\n+                  <tr>\n+                    <td>${key}</td>\n+                    <td>${value || '-'}</td>\n+                  </tr>\n+                `\n+          )\n+          .join('')}\n+              </tbody>\n+            </table>\n+          </body>\n+        </html>\n+      `;\n+\n+      // Gera o PDF usando a Expo Print API\n+      const { uri } = await Print.printToFileAsync({ html: htmlContent });\n+\n+      console.log('PDF gerado com sucesso:', uri);\n+\n+      // Opção para abrir o arquivo diretamente (se necessário)\n+      if (await Sharing.isAvailableAsync()) {\n+        await Sharing.shareAsync(uri);\n+      } else {\n+        alert(`PDF gerado e salvo em: ${uri}`);\n+      }\n+    } catch (error) {\n+      console.error('Erro ao gerar PDF:', error);\n+      alert('Erro ao gerar o PDF. Tente novamente.');\n+    }\n+\n+    export default htmlContent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737262728878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,5 +60,5 @@\n       console.error('Erro ao gerar PDF:', error);\n       alert('Erro ao gerar o PDF. Tente novamente.');\n     }\n \n-    export default ht\n\\ No newline at end of file\n+    export default htmlContent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737262744764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,9 @@\n+  import * as Print from 'expo-print';\n+  import * as Sharing from 'expo-sharing'; // Para compartilhar o PDF gerado\n+  \n+  functio html(){\n+    return()\n+  }\n+  \n+\n+    export default htmlContent;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1737262482022,
            "name": "Commit-0",
            "content": "  try {\n      // Crie o conteúdo HTML para o PDF\n      const htmlContent = `\n        <html>\n          <head>\n            <style>\n              body { font-family: Arial, sans-serif; padding: 20px; }\n              h1 { text-align: center; color: #333; }\n              table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n              th { background-color: #f4f4f4; }\n            </style>\n          </head>\n          <body>\n            <h1>Relatório de Hora Extra</h1>\n            <p><strong>Linha:</strong> ${line}</p>\n            <p><strong>Data:</strong> ${date.toLocaleDateString('pt-BR')}</p>\n            <table>\n              <thead>\n                <tr>\n                  <th>Posto de Trabalho</th>\n                  <th>Colaborador</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${Object.entries(formData)\n          .map(\n            ([key, value]) => `\n                  <tr>\n                    <td>${key}</td>\n                    <td>${value || '-'}</td>\n                  </tr>\n                `\n          )\n          .join('')}\n              </tbody>\n            </table>\n          </body>\n        </html>\n      `;\n\n      // Gera o PDF usando a Expo Print API\n      const { uri } = await Print.printToFileAsync({ html: htmlContent });\n\n      console.log('PDF gerado com sucesso:', uri);\n\n      // Opção para abrir o arquivo diretamente (se necessário)\n      if (await Sharing.isAvailableAsync()) {\n        await Sharing.shareAsync(uri);\n      } else {\n        alert(`PDF gerado e salvo em: ${uri}`);\n      }\n    } catch (error) {\n      console.error('Erro ao gerar PDF:', error);\n      alert('Erro ao gerar o PDF. Tente novamente.');\n    }"
        }
    ]
}